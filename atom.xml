<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jabinzou</title>
  
  <subtitle>Jabinzou</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jabinzou.github.io/"/>
  <updated>2020-02-12T05:55:55.638Z</updated>
  <id>https://jabinzou.github.io/</id>
  
  <author>
    <name>Jabinzou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue源码分析之生命周期</title>
    <link href="https://jabinzou.github.io/2020/02/12/vue-yuan-ma-zhi-sheng-ming-zhou-qi/"/>
    <id>https://jabinzou.github.io/2020/02/12/vue-yuan-ma-zhi-sheng-ming-zhou-qi/</id>
    <published>2020-02-12T05:46:35.347Z</published>
    <updated>2020-02-12T05:55:55.638Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;对于vue我们在开篇就可以看到对于vue的生命周期做了图形展示，而我们日常的开发通常使用到的会很多涉及到vue的生命周期的运用，那么vue的生命周期每个周期都经过哪些过程？我们这篇文章就对vue源码层级进行分析，解读vue的生命周期。&lt;/p&gt;
&lt;p&gt;vue版本：
        
      
    
    </summary>
    
    
      <category term="vue" scheme="https://Jabinzou.github.io/categories/vue/"/>
    
    
      <category term="源码分析" scheme="https://Jabinzou.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>node 错误栈追踪</title>
    <link href="https://jabinzou.github.io/2019/12/13/node-cuo-wu-zhan-zhui-zong/"/>
    <id>https://jabinzou.github.io/2019/12/13/node-cuo-wu-zhan-zhui-zong/</id>
    <published>2019-12-13T12:03:54.291Z</published>
    <updated>2020-02-12T05:36:04.453Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;js的堆栈&quot;&gt;&lt;a href=&quot;#js的堆栈&quot; class=&quot;headerlink&quot; title=&quot;js的堆栈&quot;&gt;&lt;/a&gt;js的堆栈&lt;/h3&gt;&lt;p&gt;首先我们需要知道，js的堆栈是什么，即js的函数执行是怎恶样的？&lt;br&gt;根据定义：堆栈的数据结构
        
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://Jabinzou.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://Jabinzou.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>vue源码分析之vnode-patch-diff</title>
    <link href="https://jabinzou.github.io/2019/12/10/vue-yuan-ma-fen-xi-zhi-vnode-patch-diff/"/>
    <id>https://jabinzou.github.io/2019/12/10/vue-yuan-ma-fen-xi-zhi-vnode-patch-diff/</id>
    <published>2019-12-10T09:13:37.583Z</published>
    <updated>2019-12-10T09:57:53.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;说起DOM一般来说对于FE来说都不会陌生，在平时我们开发工作中对于DOM的操作（接口）操作html。但是对于使用过前端框架VUE或者React对于vdom应该都有所闻，这篇文章就借引来说一下Vue的vdom和其中的diff算法~ps:
        
      
    
    </summary>
    
    
      <category term="vue" scheme="https://Jabinzou.github.io/categories/vue/"/>
    
    
      <category term="源码分析" scheme="https://Jabinzou.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>python爬取数据</title>
    <link href="https://jabinzou.github.io/2019/12/10/python-pa-qu-shu-ju/"/>
    <id>https://jabinzou.github.io/2019/12/10/python-pa-qu-shu-ju/</id>
    <published>2019-12-10T08:43:33.424Z</published>
    <updated>2019-12-10T09:33:57.712Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;其实刚开始数据爬取我是有些懵懂😂，虽说平时接触的web技术可能会多一点，对于这方面的认知还真的停留在一味的接口调用从接口拿到对应的字段就可以了，但是实际上是有些不同的。我们都知道大多网站为了让搜索引擎的spider能够快速的爬取到内容就能最快的将数据展示在浏览器上，这个时
        
      
    
    </summary>
    
    
      <category term="python" scheme="https://Jabinzou.github.io/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://Jabinzou.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jabinzou.github.io/2019/11/26/hello-world/"/>
    <id>https://jabinzou.github.io/2019/11/26/hello-world/</id>
    <published>2019-11-26T07:43:58.193Z</published>
    <updated>2019-12-09T07:04:08.456Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a
        
      
    
    </summary>
    
    
      <category term="Demo" scheme="https://Jabinzou.github.io/categories/Demo/"/>
    
    
      <category term="highlight" scheme="https://Jabinzou.github.io/tags/highlight/"/>
    
  </entry>
  
</feed>
